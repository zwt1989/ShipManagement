<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GoMusic.Utilities</name>
    </assembly>
    <members>
        <member name="T:GoMusic.Utilities.RSA">
            <summary>
            RSA 加密类
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.RSA.RSAEncryption(System.String)">
            <summary>
            加密
            </summary>
            <param name="word">待加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.RSA.RSADecryption(System.String)">
            <summary>
            解密，当密文不正确时，会抛出异常
            </summary>
            <param name="encryptWord">待解密的密文字符串</param>
            <returns></returns>
        </member>
        <member name="T:GoMusic.Utilities.ConfigurationUtility">
            <summary>
            配置文件的工具类
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.ConfigurationUtility.AppSettingsToInt_GreaterThanEqual(System.String,System.Nullable{System.Int32},System.Int32)">
            <summary>
            获取当前应用程序中配置文件下 AppSettings 中的 Int 值，并且判断是否大于或等于某个值，如果转换错误或者小于这个值，则采用默认值
            </summary>
            <param name="key">AppSettings 中 Key</param>
            <param name="greaterThanEqual">必须大于或等于的数，为 null 表示不判断</param>
            <param name="defaultValue">如果转换 Value 失败，或者值小于某个数，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.ConfigurationUtility.AppSettings``1(System.String,``0)">
            <summary>
            获取当前应用程序中配置文件下 AppSettings 中的值，有错误也不抛出异常
            </summary>
            <typeparam name="TValue">返回的类型</typeparam>
            <param name="key">AppSettings 中 Key</param>
            <param name="defaultValue">如果转换 Value 失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.ConfigurationUtility.AppSettings``1(System.String,System.Boolean,System.Boolean,``0)">
            <summary>
            获取当前应用程序中配置文件下 AppSettings 中的值
            </summary>
            <typeparam name="TValue">返回的类型</typeparam>
            <param name="key">AppSettings 中 Key</param>
            <param name="ifThrowExceptionWhenKeyNotFound">当 AppSettings 节点下的 Key 在配置文件中不存在时，是否抛出异常</param>
            <param name="ifThrowExceptionWhenValueNotRight">当 AppSettings 节点下的 Key 对应的 Value 的类型不正确或者类型转换失败时，是否抛出异常</param>
            <param name="defaultValue">如果转换 Value 失败，且参数要求不抛出异常时，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.ConfigurationUtility.UpdateAppSetting(System.String,System.String)">
            <summary>
            根据 Key 来更新 web.config 文件中的 appSetting
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="T:GoMusic.Utilities.GuidComb">
            <summary>
            Guid 工具类
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.GuidComb.GenerateComb">
            <summary>
            Generates a sequential guid
            Based on http://stackoverflow.com/questions/665417/sequential-guid-in-linq-to-sql
            </summary>
            <returns></returns>
        </member>
        <member name="T:GoMusic.Utilities.TryConvertPredicate`1">
            <summary>
            表示定义一组条件并确定指定对象是否能把 String 类型的字符串转换为特定的类型
            </summary>
            <typeparam name="T">返回的实体对象的类型</typeparam>
            <param name="value">待转换的字符串</param>
            <param name="returnEntity">返回的实体对象</param>
            <returns>如果 value 符合由此委托表示的方法中定义的转换条件，则为 true；否则为 false。</returns>
        </member>
        <member name="T:GoMusic.Utilities.ConvertUtility">
            <summary>
            类型转换工具类
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithComma``1(System.String)">
            <summary>
            根据用英文逗号连接的字符串动态强制转换成对应类型的集合，如果格式不正确或转换失败，将抛出异常
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Int(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 int 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Short(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 short 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Float(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 float 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Double(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 double 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_DateTime(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 DateTime 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Bool(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 bool 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Byte(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 byte 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Char(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 char 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Decimal(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 decimal 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Long(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 long 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Uint(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 uint 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Ushort(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 ushort 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Ulong(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 ulong 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithCommaTo_Guid(System.String)">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为 Guid 集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="M:GoMusic.Utilities.ConvertUtility.ParseTypeBySplitWithComma``1(System.String,GoMusic.Utilities.TryConvertPredicate{``0})">
            <summary>
            根据用英文逗号连接的字符串，尝试着转换为相应类型的集合。错误的值将会被忽略。
            </summary>
            <param name="source">需要转换对应类型的字符串，多个用逗号分隔</param>
            <param name="tryConvertPredicate">需要转换对应类型的字符串，多个用逗号分隔</param>
            <returns>集合</returns>
        </member>
        <member name="T:GoMusic.Utilities.IOHelper">
            <summary>
            对文件的 IO 操作的帮助类
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.IOHelper.TryDeleteFile(System.String)">
            <summary>
            尝试删除文件
            </summary>
            <param name="filePhysicalPath">文件的物理路径</param>
            <returns>true 表示删除成功</returns>
        </member>
        <member name="M:GoMusic.Utilities.IOHelper.TryDeleteFile(System.String,System.String@)">
            <summary>
            尝试删除文件
            </summary>
            <param name="filePhysicalPath">文件的物理路径</param>
            <param name="errorMessage">如果返回值为 false，则包含的错误消息</param>
            <returns>true 表示删除成功</returns>
        </member>
        <member name="M:GoMusic.Utilities.IOHelper.TryDeleteFile(System.String,System.Boolean@,System.String@)">
            <summary>
            尝试删除文件
            </summary>
            <param name="filePhysicalPath">文件的物理路径</param>
            <param name="fileExist">输出文件是否存在</param>
            <param name="errorMessage">如果返回值为 false，则包含的错误消息</param>
            <returns>true 表示删除成功</returns>
        </member>
        <member name="M:GoMusic.Utilities.IOHelper.AppendAllText(System.String,System.String)">
            <summary>
            附加内容到文件，如果文件不存在，以及文件所在的目录不存在，则创建目录
            </summary>
            <param name="fileName">文件的物理路径</param>
            <param name="content">文件内容</param>
            <returns>写入成功，则返回 true</returns>
        </member>
        <member name="M:GoMusic.Utilities.IOHelper.AppendAllText(System.String,System.String,System.String@)">
            <summary>
            附加内容到文件，如果文件不存在，以及文件所在的目录不存在，则创建目录
            </summary>
            <param name="fileName">文件的物理路径</param>
            <param name="content">文件内容</param>
            <param name="errorMessage">如果返回为 false，则会返回的错误消息</param>
            <returns>写入成功，则返回 true</returns>
        </member>
        <member name="T:GoMusic.Utilities.StringValidationExtensions">
            <summary>
            字符串的验证类的扩展
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.StringValidationExtensions.IsValidEmail(System.String)">
            <summary>
            检查看是否当前字符串是一个合法的电子邮件地址
            </summary>
            <param name="strIn">当前字符串</param>
            <returns>true:合法 | false:非法</returns>
        </member>
        <member name="M:GoMusic.Utilities.StringValidationExtensions.IsEmail(System.String)">
            <summary>
            检查看是否当前字符串是一个合法的电子邮件地址（2）
            </summary>
            <param name="inputData">当前字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringValidationExtensions.IsValidURL(System.String)">
            <summary>
            检查是否是合法的 URL
            </summary>
            <param name="url">当前字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringValidationExtensions.IsValidUserName(System.String)">
            <summary>
            检查用户名字符串中是否只包含（英文字母、数字、下划线、中文）
            </summary>
            <param name="userName">用户名</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringValidationExtensions.IsValidZip(System.String)">
            <summary>
            检查是否是合法的邮政编码
            </summary>
            <param name="zip">邮政编码</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringValidationExtensions.IsValidPhone(System.String)">
            <summary>
            检查是否是合法的电话号码
            </summary>
            <param name="phone">电话号码</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringValidationExtensions.IsValidMobile(System.String)">
            <summary>
            检查是否是合法的手机号码
            </summary>
            <param name="mobile">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringValidationExtensions.IsValidPhoneAndMobile(System.String)">
            <summary>
            检查是否是合法的电话号码或手机号码
            </summary>
            <param name="number">电话号码或手机号码</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringValidationExtensions.IsValidIP(System.String)">
            <summary>
            检查是否是合法的 IP 地址
            </summary>
            <param name="ip">IP 地址</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringValidationExtensions.IsIdCard(System.String)">
            <summary>
            检查是否是合法的身份证号码
            </summary>
            <param name="idCard">身份证号码</param>
            <returns></returns>
        </member>
        <member name="T:GoMusic.Utilities.StringExtensions">
            <summary>
            字符串扩展类
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.RemovePrefix(System.String,System.String)">
            <summary>
            移除前缀字符串
            </summary>
            <param name="o">当前字符串</param>
            <param name="prefix">要移除的字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.RemovePrefix(System.String,System.String,System.StringComparison)">
            <summary>
            移除前缀字符串
            </summary>
            <param name="o">当前字符串</param>
            <param name="prefix">要移除的字符串</param>
            <param name="comparisonType">要使用的区域、大小写和排序规则</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.RemovePrefix(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            移除前缀字符串（待测试）
            </summary>
            <param name="o">当前字符串</param>
            <param name="prefixs">要移除一个或多个的字符串</param>
            <param name="comparisonType">要使用的区域、大小写和排序规则</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.RemoveSuffix(System.String,System.String)">
            <summary>
            移除后缀字符串
            </summary>
            <param name="o">当前字符串</param>
            <param name="suffix">要移除的字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.RemoveSuffix(System.String,System.String,System.StringComparison)">
            <summary>
            移除后缀字符串
            </summary>
            <param name="o">当前字符串</param>
            <param name="suffix">要移除的字符串</param>
            <param name="comparisonType">要使用的区域、大小写和排序规则</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.RemovePrefixAndSuffix(System.String,System.String)">
            <summary>
            移除前缀和后缀字符串
            </summary>
            <param name="o">当前字符串</param>
            <param name="keyword">要移除的字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.RemovePrefixAndSuffix(System.String,System.String,System.StringComparison)">
            <summary>
            移除前缀和后缀字符串
            </summary>
            <param name="o">当前字符串</param>
            <param name="keyword">要移除的字符串</param>
            <param name="comparisonType">要使用的区域、大小写和排序规则</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.GetUnderlineCount(System.String)">
            <summary>
            得到一个字符串中下划线的个数
            </summary>
            <param name="words">字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.EndsWith(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            检测字符串是否以集合中的字符串结束
            </summary>
            <param name="value">需要检查的字符串</param>
            <param name="source">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.EndsWith(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            检测字符串是否以集合中的字符串结束
            </summary>
            <param name="value">需要检查的字符串</param>
            <param name="source">字符串集合</param>
            <param name="comparisonType">枚举选项</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.EndsWith(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            检测字符串是否以集合中的字符串结束
            </summary>
            <param name="value">需要检查的字符串</param>
            <param name="source">字符串集合</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <param name="culture">当前文化</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.ReplaceNonEnAndNonNumber(System.String,System.Char)">
            <summary>
            替换字符串中非英文字符和非数字为特定字符串
            </summary>
            <param name="value">需要检查并替换的值</param>
            <param name="replaceValue">特定字符</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.ReplaceNonEnAndNonNumber(System.String,System.String)">
            <summary>
            替换字符串中非英文字符和非数字为特定字符串
            </summary>
            <param name="value">需要检查并替换的值</param>
            <param name="replaceValue">特定字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.TryConvertToDateTime(System.String)">
            <summary>
            尝试传唤成 DateTime 类型
            </summary>
            <param name="o">当前字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.TryConvertToDateTime(System.String,System.DateTime)">
            <summary>
            尝试传唤成 DateTime 类型
            </summary>
            <param name="o">当前字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.NumberOfOccurrences(System.String,System.String)">
            <summary>
            返回一个字符串在当前字符串中出现的数量
            </summary>
            <param name="text">当前字符串</param>
            <param name="stringToFind">需要查找的字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.StripNonNumerics(System.String)">
            <summary>
            从一个字符串中删除非数字的一个或多个字符
            </summary>
            <param name="source">当前字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.StringReverse(System.String)">
            <summary>
            翻转一个字符串
            </summary>
            <param name="source">当前字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.StripHtmlFromString(System.String)">
            <summary>
            用正则表达式从一个字符串中删除 HTML 标记
            </summary>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.ReplaceBlankSpaceToHtml(System.String)">
            <summary>
            把空格、换行替换成 Html 标记
            </summary>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.SubstringEllipsis(System.String,System.Int32)">
            <summary>
            截取并省略字符串
            </summary>
            <param name="str"></param>
            <param name="length">需要截取的字符长度</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.StringExtensions.GetSubString(System.String,System.Int32)">
            <summary>
            获取指定字符串从 0 开始指定长度的字符。单个字符若是双字节长度算 1 若为单字节长度算 0.5。
            </summary>
            <param name="input">需要获取的字符串</param>
            <param name="count">需要获取的长度</param>
            <returns></returns>
        </member>
        <member name="T:GoMusic.Utilities.Resources.FluentValidationResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.CreditCardError">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 是一个不合法的信用卡号。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.email_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 是一个不合法的电子邮件地址。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.equal_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 应该和 &apos;{PropertyValue}&apos; 相等。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.exact_length_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 必须是 {MaxLength} 字符长度，你已经输入了 {TotalLength} 字符。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.exclusivebetween_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 必须在 {From} 和 {To} (排除)之间， 你输入了 {Value}。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.greaterthan_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 必须大于 &apos;{ComparisonValue}&apos;。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.greaterthanorequal_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 必须大于或等于 &apos;{ComparisonValue}&apos;。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.inclusivebetween_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 必须在 {From} 和 {To} 之间， 你输入了 {Value}。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.length_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 必须在 {MinLength} 到 {MaxLength} 字符，你已经输入了 {TotalLength} 字符。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.lessthan_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 必须小于 &apos;{ComparisonValue}&apos;。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.lessthanorequal_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 必须小于或等于 &apos;{ComparisonValue}&apos;。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.notempty_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 的长度必须大于 0。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.notequal_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 不能和 &apos;{PropertyValue}&apos; 相等。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.notnull_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 不能为空。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.predicate_error">
            <summary>
              查找类似 指定的条件不符合 &apos;{PropertyName}&apos;。 的本地化字符串。
            </summary>
        </member>
        <member name="P:GoMusic.Utilities.Resources.FluentValidationResource.regex_error">
            <summary>
              查找类似 &apos;{PropertyName}&apos; 的格式不正确。 的本地化字符串。
            </summary>
        </member>
        <member name="T:GoMusic.Utilities.TypeExtensions">
            <summary>
            Type 类的扩展
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            判断是否是匿名类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.TypeExtensions.TryToString(System.Nullable{System.DateTime})">
            <summary>
            尝试将可空类型的 DateTime 转换为等效的字符串形式，如果值为 NULL，则返回 string.Empty
            </summary>
            <param name="dateTime">可空的 DateTime 类型</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.TypeExtensions.TryToString(System.Nullable{System.DateTime},System.String)">
            <summary>
            尝试将可空类型的 DateTime 转换为等效的字符串形式，如果值为 NULL，则返回 string.Empty
            </summary>
            <param name="dateTime">可空的 DateTime 类型</param>
            <param name="format">格式，可为 NULL</param>
            <returns></returns>
        </member>
        <member name="T:GoMusic.Utilities.TypeConvertionHelper">
            <summary>
            类型转换帮助类
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.TypeConvertionHelper.ConvertToNormalOrNullableType``1(System.Object)">
            <summary>
            把一个值转换成一般（非泛型）的类型或者可为空（Nullable）的类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="value">待转换的值</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.TypeConvertionHelper.ConvertToNormalOrNullableType(System.Object,System.Type)">
            <summary>
            把一个值转换成一般（非泛型）的类型或者可为空（Nullable）的类型
            </summary>
            <param name="value">要转换的值</param>
            <param name="destinationType">目标类型</param>
            <returns>转换后的类型</returns>
        </member>
        <member name="T:GoMusic.Utilities.RandomUtils">
            <summary>
            随机工具类
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.RandomUtils.RandomString(System.Int32)">
            <summary>
            生成一个随机的字符串
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:GoMusic.Utilities.EnumerableExtensions">
            <summary>
            可枚举集合的扩展类
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.EnumerableExtensions.JoinEachItemToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            用英文逗号连接集合中的每一个元素
            </summary>
            <typeparam name="TSource">元素的类型</typeparam>
            <param name="source">集合</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.EnumerableExtensions.JoinEachItemToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            用指定的字符串连接集合中的每一个元素
            </summary>
            <typeparam name="T">元素的类型</typeparam>
            <param name="target">集合</param>
            <param name="separator">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.EnumerableExtensions.ToJoinEachItemString``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.String)">
            <summary>
            用指定字符串连接集合中的每一个元素
            </summary>
            <typeparam name="TSource">元素的类型</typeparam>
            <typeparam name="TProperty">指定要连接的属性的类型</typeparam>
            <param name="source">集合</param>
            <param name="funcProperty">指定要连接的属性</param>
            <param name="separator">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.EnumerableExtensions.ToJoinEachItemString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            用指定字符串连接集合中的每一个元素
            </summary>
            <typeparam name="TSource">元素的类型</typeparam>
            <param name="source">集合</param>
            <param name="separator">连接符</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.EnumerableExtensions.ToJoinEachItemString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            用英文逗号连接集合中的每一个元素
            </summary>
            <typeparam name="TSource">元素的类型</typeparam>
            <param name="source">集合</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.EnumerableExtensions.SplitWithCommaAndJoinWithComma(System.String)">
            <summary>
            取出字符串中的多个逗号成一个逗号
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.EnumerableExtensions.ConvertAllToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将一个可枚举的类型转换为 string 类型
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <param name="source">集合</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.EnumerableExtensions.AddToEnd``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            添加一个或多个元素到指定集合的末尾
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="target">集合</param>
            <param name="values">被添加的一个或多个元素</param>
            <returns>United sequences</returns>
        </member>
        <member name="M:GoMusic.Utilities.EnumerableExtensions.LetPointerEvaluateEntity``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Action{``0,``1})">
            <summary>
            让指针指向一个实体
            </summary>
            <typeparam name="TSource">源实体集合</typeparam>
            <typeparam name="TValue">值实体集合</typeparam>
            <param name="sourceItems">源实体集合</param>
            <param name="sourceValueItems">值实体集合</param>
            <param name="fn">判断 true or false 的委托</param>
            <param name="actionEvaluate">做一个什么事的委托</param>
        </member>
        <member name="T:GoMusic.Utilities.ExpressionHelper`1">
            <summary>
            Lambda 表达式帮助类
            </summary>
            <typeparam name="T">实体的类型</typeparam>
        </member>
        <member name="M:GoMusic.Utilities.ExpressionHelper`1.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            得到一个字段（Field）或属性（Property）名
            </summary>
            <typeparam name="TProperty">属性（Property）的类型</typeparam>
            <param name="express">用于指定属性的 Lambda 表达式</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.ExpressionHelper`1.GetPropertiesName``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            得到一个匿名类型（比如：new { x.Id, x.Name }）里面包含的成员名集合
            </summary>
            <typeparam name="TProperty">属性（Property）的类型</typeparam>
            <param name="express">用于指定属性的 Lambda 表达式</param>
            <returns></returns>
        </member>
        <member name="T:GoMusic.Utilities.ChinesePinYinHelper">
            <summary>
            中文拼音帮助器
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.ChinesePinYinHelper.CHSToPinyin(System.String)">
            <summary>
            把中文转换为拼音
            </summary>
            <param name="chs">中文</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.ChinesePinYinHelper.CHSToPinyin(System.String,System.Boolean)">
            <summary>
            把中文转换为拼音
            </summary>
            <param name="chs">中文</param>
            <param name="initialCap">初始化的</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.ChinesePinYinHelper.CHSToPinyin(System.String,System.String)">
            <summary>
            把中文转换为拼音
            </summary>
            <param name="chs">中文</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.ChinesePinYinHelper.CHSToPinyin(System.String,System.String,System.Boolean)">
            <summary>
            把中文转换为拼音
            </summary>
            <param name="chs">中文</param>
            <param name="separator">分隔符</param>
            <param name="initialCap">初始化的</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.ChinesePinYinHelper.GetFirstPY(System.String)">
            <summary>
            得到首字母拼音
            </summary>
            <param name="chsStr">当前字符串</param>
            <returns></returns>
        </member>
        <member name="P:GoMusic.Utilities.ChinesePinYinHelper.CHSPhraseSpecial">
            <summary>
            获取或设置中国短语
            </summary>
        </member>
        <member name="T:GoMusic.Utilities.SingletonFactory`2">
            <summary>
            单例工厂
            </summary>
            <typeparam name="TInterface">接口的类型</typeparam>
            <typeparam name="TDefaultDerivedclass">派生类的类型</typeparam>
        </member>
        <member name="P:GoMusic.Utilities.SingletonFactory`2.CurrentProvider">
            <summary>
            得到默认的提供者
            </summary>
        </member>
        <member name="T:GoMusic.Utilities.ObjectExtensions">
            <summary>
            基对象 Object 扩展
            </summary>
        </member>
        <member name="M:GoMusic.Utilities.ObjectExtensions.TryConvert``1(System.Object,``0)">
            <summary>
            尝试着改变类型，转换失败，也不抛出异常，此时返回默认值。支持基本类型以及 Nullable 类型
            </summary>
            <typeparam name="T">返回值</typeparam>
            <param name="value">值</param>
            <param name="defaultValue">默认值，如果转换失败，返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:GoMusic.Utilities.ObjectExtensions.GetPropertyValue``1(System.Object,System.String,``0@)">
            <summary>
            利用反射，动态获取一个 Property 的值（一般用于获得匿名类型的实例的值）
            </summary>
            <typeparam name="T">期望返回的类型</typeparam>
            <param name="obj">要获得的对象</param>
            <param name="propertyName">属性名称</param>
            <param name="returnValue">返回值</param>
            <returns>是否成功，如果成功，则返回等效的值，否则返回默认值</returns>
        </member>
        <member name="M:GoMusic.Utilities.ObjectExtensions.GetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            利用反射，动态获取一个 Property 的值（一般用于获得匿名类型的实例的值）
            </summary>
            <typeparam name="T">期望返回的类型</typeparam>
            <param name="obj">要获得的对象</param>
            <param name="propertyName">属性名称</param>
            <param name="defaultValue">默认值</param>
            <returns>是否成功，如果成功，则返回等效的值，否则返回默认值</returns>
        </member>
        <member name="M:GoMusic.Utilities.ObjectExtensions.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            利用反射，动态设置一个 Property 的值（一般用于设置具有 public setter 类型的实例的值）
            </summary>
            <param name="obj">要设置的对象</param>
            <param name="propertyName">属性名称</param>
            <param name="value">要设置的值</param>
        </member>
    </members>
</doc>
